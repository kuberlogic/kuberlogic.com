"use strict";(self.webpackChunkkuberlogic_com=self.webpackChunkkuberlogic_com||[]).push([[7752],{3905:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>u});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=t.createContext({}),c=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},s=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(a),u=i,g=m["".concat(p,".").concat(u)]||m[u]||d[u]||r;return a?t.createElement(g,o(o({ref:n},s),{},{components:a})):t.createElement(g,o({ref:n},s))}));function u(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=a[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6034:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=a(7462),i=(a(7294),a(3905));const r={id:"application-credentials-management",title:"Providing application credentials management",tags:["credentials","application","configuration"]},o=void 0,l={unversionedId:"configuring/application-credentials-management",id:"configuring/application-credentials-management",title:"Providing application credentials management",description:"KuberLogic provides a possibility to manage credentials for managed applications.",source:"@site/docs/configuring/appllication-credentials-management.md",sourceDirName:"configuring",slug:"/configuring/application-credentials-management",permalink:"/docs/configuring/application-credentials-management",draft:!1,editUrl:"https://github.com/kuberlogic/kuberlogic.com/blob/master/docs/configuring/appllication-credentials-management.md",tags:[{label:"credentials",permalink:"/docs/tags/credentials"},{label:"application",permalink:"/docs/tags/application"},{label:"configuration",permalink:"/docs/tags/configuration"}],version:"current",frontMatter:{id:"application-credentials-management",title:"Providing application credentials management",tags:["credentials","application","configuration"]},sidebar:"mySidebar",previous:{title:"Updating application instances",permalink:"/docs/configuring/application-instances-update"},next:{title:"Integrating with billing provider",permalink:"/docs/configuring/billing"}},p={},c=[{value:"Providing a shell command for application management",id:"providing-a-shell-command-for-application-management",level:2},{value:"Configuring your application <code>docker-compose.yml</code>",id:"configuring-your-application-docker-composeyml",level:2},{value:"Examples",id:"examples",level:3}],s={toc:c};function d(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"KuberLogic provides a possibility to manage credentials for managed applications.\nThis can be useful when you want to provide a reset password form for your end user or set user credentials during the application provisioning."),(0,i.kt)("p",null,"There are some prerequisites that should be met:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"It should be possible to set credentials by calling a shell command. This command should be available inside the application container."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose.yml")," should be configured to signal that this functionality is supported.")),(0,i.kt)("h2",{id:"providing-a-shell-command-for-application-management"},"Providing a shell command for application management"),(0,i.kt)("p",null,"It should be possible to set application credentials by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"exec")," command to the application container.\nFor example, you are providing an application ",(0,i.kt)("inlineCode",{parentName:"p"},"demo")," and it is possible to set application credentials by calling ",(0,i.kt)("inlineCode",{parentName:"p"},'curl -X POST -d \'{"username": "demo", "password": "demo123"}\' <application endpoint>')," command.\nIn this case make sure that ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," is installed and is available inside the container image."),(0,i.kt)("h2",{id:"configuring-your-application-docker-composeyml"},"Configuring your application ",(0,i.kt)("inlineCode",{parentName:"h2"},"docker-compose.yml")),(0,i.kt)("p",null,"Following the example from above we now need to provide this configuration to your ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"x-kuberlogic-set-password-cmd")," parameter."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"x-kuberlogic-set-password-cmd")," parameter can be set only for one ",(0,i.kt)("inlineCode",{parentName:"p"},"service"),".")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nversion: "3.9"\n\nservices:\n  demo:\n    # set `x-kuberlogic-set-password-cmd` parameter here\n    x-kuberlogic-set-password-cmd: curl -X POST -d \'{"username": "{{ .Data.user }}", "password": {{ .Data.password }}}\' <application endpoint>\n    image: demo\n    \n  db:\n    image: postgresql\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},".Data")," is a variable that is set by KuberLogic. ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," are fields of a ",(0,i.kt)("inlineCode",{parentName:"p"},".Data")," variable.\nFields can be set to any value, they are set dynamically by KuberLogic when it receives ",(0,i.kt)("inlineCode",{parentName:"p"},"update-credentials")," command or REST API call."),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kuberlogic service credentials-update --service_id=demo token=test\n")),(0,i.kt)("p",null,"When the command above is executed, ",(0,i.kt)("inlineCode",{parentName:"p"},".Data")," variable will have one field - ",(0,i.kt)("inlineCode",{parentName:"p"},"token")," that will have the value ",(0,i.kt)("inlineCode",{parentName:"p"},"test"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kuberlogic service credentials-update --service_id=demo username=example password=test123 email=example@example.com\n")),(0,i.kt)("p",null,"When the command above is executed, ",(0,i.kt)("inlineCode",{parentName:"p"},".Data")," variable will have three fields - ",(0,i.kt)("inlineCode",{parentName:"p"},"username"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," set to respectful values."))}d.isMDXComponent=!0}}]);