"use strict";(self.webpackChunkkuberlogic_com=self.webpackChunkkuberlogic_com||[]).push([[8205],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return t?a.createElement(k,o(o({ref:n},c),{},{components:t})):a.createElement(k,o({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3623:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={id:"docker-compose",title:"Preparing your application",tags:["docker-compose","application","configuration"]},o=void 0,l={unversionedId:"configuring/docker-compose",id:"configuring/docker-compose",title:"Preparing your application",description:"KuberLogic provides a simple way to deploy your application as SaaS by supporting docker-compose.yml structure.",source:"@site/docs/configuring/docker-compose.md",sourceDirName:"configuring",slug:"/configuring/docker-compose",permalink:"/docs/configuring/docker-compose",draft:!1,editUrl:"https://github.com/kuberlogic/docs.kuberlogic.com/docs/configuring/docker-compose.md",tags:[{label:"docker-compose",permalink:"/docs/tags/docker-compose"},{label:"application",permalink:"/docs/tags/application"},{label:"configuration",permalink:"/docs/tags/configuration"}],version:"current",frontMatter:{id:"docker-compose",title:"Preparing your application",tags:["docker-compose","application","configuration"]},sidebar:"mySidebar",previous:{title:"Enabling backup/restore capability",permalink:"/docs/configuring/backups"},next:{title:"Integrating with billing provider",permalink:"/docs/configuring/billing"}},s={},p=[{value:"Limitations",id:"limitations",level:3},{value:"Only one service can have its ports published",id:"only-one-service-can-have-its-ports-published",level:4},{value:"Only a single port can be published.",id:"only-a-single-port-can-be-published",level:4},{value:"Local volume mounts are not supported",id:"local-volume-mounts-are-not-supported",level:4},{value:"Supported docker-compose extensions",id:"supported-docker-compose-extensions",level:3},{value:"<code>x-kuberlogic-access-http-path</code>",id:"x-kuberlogic-access-http-path",level:4},{value:"Templating <code>docker-compose.yml</code>",id:"templating-docker-composeyml",level:3},{value:"Examples",id:"examples",level:4},{value:"Specify the image version",id:"specify-the-image-version",level:5},{value:"Configure service URL parameter",id:"configure-service-url-parameter",level:5},{value:"Generate a random key and save it to the persistent secret",id:"generate-a-random-key-and-save-it-to-the-persistent-secret",level:5},{value:"Generate a random RSA key and access it for the different service",id:"generate-a-random-rsa-key-and-access-it-for-the-different-service",level:5}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"KuberLogic provides a simple way to deploy your application as SaaS by supporting ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," structure."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"KuberLogic only supports a single application type configured via docker-compose.yml. Any change to this file will be propagated to all KuberLogic managed applications.")),(0,r.kt)("p",null,"You will be asked to enter path to the docker-compose.yml during the installation process, otherwise KuberLogic will be provisioned with demo application."),(0,r.kt)("h3",{id:"limitations"},"Limitations"),(0,r.kt)("p",null,"There are few limitations about supported docker-compose.yml:"),(0,r.kt)("h4",{id:"only-one-service-can-have-its-ports-published"},"Only one service can have its ports published"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: my-service\n    image: my-image\n    command:\n      - "./run.sh"\n- name: my-service-2\n  image: my-image\n  ports:\n    - "8080:8080"\n  command:\n    - "./run.sh"\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will not work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: my-service\n    image: my-image\n    ports:\n      - "8080:8080"\n    command:\n      - "./run.sh"\n- name: my-service-2\n  image: my-image\n  ports:\n    - "8080:8080"\n  command:\n    - "./run.sh"\n')),(0,r.kt)("h4",{id:"only-a-single-port-can-be-published"},"Only a single port can be published."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: my-service\n    image: my-image\n    command:\n      - "./run.sh"\n- name: my-service-2\n  image: my-image\n  ports:\n    - "8080:8080"\n  command:\n    - "./run.sh"\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will not work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: my-service\n    image: my-image\n    command:\n      - "./run.sh"\n- name: my-service-2\n  image: my-image\n  ports:\n    - "8080:8080"\n    - "8081:8081"\n  command:\n    - "./run.sh"\n')),(0,r.kt)("h4",{id:"local-volume-mounts-are-not-supported"},"Local volume mounts are not supported"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nvolumes:\n  data:\n\nservices:\n  - name: my-service\n    image: my-image\n    command:\n      - "./run.sh"\n    volumes:\n      - data:/data\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will not work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: my-service\n    image: my-image\n    command:\n      - "./run.sh"\n    volumes:\n      - ./data:/data\n')),(0,r.kt)("h3",{id:"supported-docker-compose-extensions"},"Supported docker-compose extensions"),(0,r.kt)("p",null,"You can use the following extensions to your docker-compose.yml:"),(0,r.kt)("h4",{id:"x-kuberlogic-access-http-path"},(0,r.kt)("inlineCode",{parentName:"h4"},"x-kuberlogic-access-http-path")),(0,r.kt)("p",null,"This extension allows you to expose more than one ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose")," service by specifying HTTP path prefixes. Default path prefix is ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),"."),(0,r.kt)("p",null,"Duplicates are not allowed and will trigger a service provisioning error."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: api # This will be exposed at `/api`\n    x-kuberlogic-access-http-path: /api\n    image: my-image\n    command:\n      - "./run.sh"\n    ports:\n      - "8080:8080"\n  - name: web # This will be exposed on `/`\n    image: web\n    ports:\n      - "8080:8080"\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Will not work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: api # This will be exposed at `/api`\n    x-kuberlogic-access-http-path: /api\n    image: my-image\n    command:\n      - "./run.sh"\n    ports:\n      - "8080:8080"\n  - name: web # Duplicate HTTP path prefix!\n    x-kuberlogic-access-http-path: /api\n    image: web\n    ports:\n      - "8080:8080"\n')),(0,r.kt)("h3",{id:"templating-docker-composeyml"},"Templating ",(0,r.kt)("inlineCode",{parentName:"h3"},"docker-compose.yml")),(0,r.kt)("p",null,"KuberLogic also supports templating certain service fields in ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," by using Go templates."),(0,r.kt)("p",null,"Fields that can be templated are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"image")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"command")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"environment")," variables' values")),(0,r.kt)("p",null,"Service parameters that can be accessed in the template are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Name"),": The name of the service"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Namespace"),": The namespace of the service"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Host"),": The host of the service"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Replicas"),": The number of replicas of the service"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"VolumeSize"),": The size of the volume of the service"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Version"),": The version of the service"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TLSEnabled"),": Whether the service is TLS enabled"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Parameters"),": The advanced parameters of the service")),(0,r.kt)("p",null,"There are also a few functions that can be used for environment variables:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".Endpoint"),": Returns the endpoint of the service"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".GenerateKey <len: int,optional>"),": Generate a random key of the specified length"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".GenerateRSAKey <bits: int,optional>"),": Generate a random RSA key of the specified length"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PersistentSecret <id: string,optional>"),": Saves the value of the field in a persistent secret that will be used by the service. (Note the absence of . at the start of the function).")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"Generate...")," functions will generate different values each time the template is rendered. This will result in constant service restarts."),(0,r.kt)("p",{parentName:"admonition"},"You should use ",(0,r.kt)("inlineCode",{parentName:"p"},"PersistentSecret")," function to store the generated value of the field in a persistent secret.")),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("h5",{id:"specify-the-image-version"},"Specify the image version"),(0,r.kt)("p",null,"Provisioned services will use ",(0,r.kt)("inlineCode",{parentName:"p"},"version"),' as the image tag or "latest" if not specified.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: my-service\n    image: my-image:{{ default .Version "latest" }}\n    command:\n      - "./run.sh"\n    ports:\n      - "8080:8080"\n')),(0,r.kt)("h5",{id:"configure-service-url-parameter"},"Configure service URL parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: my-service\n    image: my-image\n    command:\n      - "./run.sh"\n    ports:\n      - "8080:8080"\n    environment:\n      - BASE_URL={{ .Endpoint }}\n')),(0,r.kt)("h5",{id:"generate-a-random-key-and-save-it-to-the-persistent-secret"},"Generate a random key and save it to the persistent secret"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: my-service\n    image: my-image\n    command:\n      - "./run.sh"\n    ports:\n      - "8080:8080"\n    environment:\n      - SECRET_KEY={{ .GenerateKey 30 | PersistentSecret }}\n')),(0,r.kt)("h5",{id:"generate-a-random-rsa-key-and-access-it-for-the-different-service"},"Generate a random RSA key and access it for the different service"),(0,r.kt)("p",null,'RSA key will be generated and saved in a persistent secret under the "PRIVATE_RSA_KEY" key.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  - name: my-service\n    image: my-image\n    command:\n      - "./run.sh"\n    ports:\n      - "8080:8080"\n    environment:\n      - SECRET_KEY={{ .GenerateRSAKey 2048 | PersistentSecret "PRIVATE_RSA_KEY" }}\n  - name: my-service-2\n    image: my-image\n    command:\n      - "./run.sh"\n    ports:\n      - "8080:8080"\n    environment:\n      - SECRET_KEY={{ .GenerateRSAKey 2048 | PersistentSecret "PRIVATE_RSA_KEY" }}\n')))}m.isMDXComponent=!0}}]);